learn how to use the RowMapper interface to define the row mapper

BeanPropertyRowMapper
    can be used to map the result of the query to a bean
    if the db table has a different structure or column names
    need to define custom mapping

RowMapper Interface
    custom row mapper can be created by implementing the RowMapper interface
    and providing the bean onto which the rows will be mapped
    The custom row mapper, PlayerMapper is created as an inner class of dao and is static, final

    @Repository
    private static class PlayerMapper implements RowMapper<Player> {

        @Override
        public Player mapRow(ResultSet rs, int rowNum) throws SQLException {
            return null;
        }
    }

mapRow(result set, row number) method from RowMapper interface
    is used here to initialize a player object.
    defines how a row is mapped
*   result set, is what JdbcTemplate gets after running the query
*   row number, row number of every row in the result set is different

    JdbcTemplate calls mapRow() for every row in the result set and passes its row number as an arg
    returns object of Player type
    mapRow() gets defined in the custom PlayerMapper class

    @Override
    public Player mapRow(ResultSet rs, int rowNum) throws SQLException {
        Player player = new Player();
        player.setId(rs.getInt("id"));
        player.setName(rs.getString("name"));
        player.setNationality(rs.getString("nationality"));
        player.setBirthDate(rs.getTime("birth_date"));
        player.setTitles(rs.getInt("titles"));
        return player;
    }

