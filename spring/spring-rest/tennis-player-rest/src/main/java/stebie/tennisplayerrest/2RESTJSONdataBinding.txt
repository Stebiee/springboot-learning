learn about json, a popular data format being used in REST applications
covering syntax, java-json data binding, jackson project

the most commonly used data formats in a REST app are JSON and XML
JSON, JavaScript Object Notation
    a plain text data format used for exchanging data between applications

JSON is a collection of name-value pairs, which the application processes as a string
so instead of using HTML or JSP to send data, it is passed as a string, and the application can process the data
JSON is language-independent and can be used with any programming language

Syntax 
    sample JSON shown below
    {
        "id": 1, 
        "fname": "Sara",
        "Iname": "Adams",
        "hobbies": ["painting", "reading"],
        "address": {
                        "city": "Adelaide",
                        "country": "Australia"
                    }
    }
    rules:
        JSON object is defined between curly braces
        the obj. consists of members in the form of comma-separated name-value pairs
        names and values are separated by a colon
        names are provided in double quotes and are on the left side of the colon
        values are on the right side of the colon
        if value is a string, it s written in double quotes
        JSON also supports arrays written within square brackets items are comma separated
        an object can contain nested objects 
        JSON objects can have a null value
        boolean values true and false are allowed

Java-JSON data binding
    a Java object (POJO) can be converted into a JSON object and vice versa through a process called data binding
    we can read JSON and use it to populate a Java object.
    in the same matter can use a Java object to create JSON

Jackson Project
    jackson project handles data binding between Java and JSON. also provides support for data binding with XML
    spring framework uses the Jackson project for data binding. the jackson data binding api is present in the 
    com.fasterxml.jaskson.databinding package

    the maven dependency adds Jackson support to the project
    <dependency>
        <groupId>com.fasterxml.jackson.core</groupId>
        <artifactId>jackson-databind</artifactId>
        <version>2.17.0</version>
    </dependency>

    jackson handles the conversion between JSON and POJOs by making use of the getter and setter methods of a class
    to convert a JSON object to POJO, the setter methods are called, POJO to JSON the getters are used
    jackson has access to the getters amd setters only not the private fields of the class

    if in a json file there was "name": "steb" in the POJO 
        public void setName(String name) {
            this.name = name;
        }

    jackson calls the corresponding setter to populate the fields.
    if a setter method matching a json property is not found, an exception is thrown

@JsonIgnoreProperties
    can be used to bypass the exception by setting the IgnoreUnknown attribute to true
    is useful when the JSON file contains more properties but are only interested in a few of them