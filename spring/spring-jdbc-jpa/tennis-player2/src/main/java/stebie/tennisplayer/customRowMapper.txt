learn how to use the RowMapper interface to define the row mapper

BeanPropertyRowMapper
    can be used to map the result of the query to a bean
    if the db table has a different structure or column names
    need to define custom mapping

RowMapper Interface
    custom row mapper can be created by implementing the RowMapper interface
    and providing the bean onto which the rows will be mapped
    The custom row mapper, PlayerMapper is created as an inner class of dao and is static, final
    useful when table def. are different from the bean definitions

    @Repository
    public static class PlayerMapper implements RowMapper<Player> {

        @Override
        public Player mapRow(ResultSet rs, int rowNum) throws SQLException {
            return null;
        }
    }

mapRow(result set, row number) method from RowMapper interface
    is used here to initialize a player object.
    defines how a row is mapped
*   result set, is what JdbcTemplate gets after running the query
*   row number, row number of every row in the result set is different

    JdbcTemplate calls mapRow() for every row in the result set and passes its row number as an arg
    returns object of Player type
    mapRow() gets defined in the custom PlayerMapper class

    @Override
    public Player mapRow(ResultSet rs, int rowNum) throws SQLException {
        Player player = new Player();
        player.setId(rs.getInt("id"));
        player.setName(rs.getString("name"));
        player.setNationality(rs.getString("nationality"));
        player.setBirthDate(rs.getTime("birth_date"));
        player.setTitles(rs.getInt("titles"));
        return player;
    }

Using custom row mapper
    to use PlayerMapper pass it any method instead of the BeanPropertyRowMapper
    will create a method that finds players based off their nationality and use the custom mapper tp conv. res. set to objects

    the PlayerMapper is called for every row in the result set and each time it returns a new Player object
    do not need to keep track of the rows, jdbcTemplate does that

    public List<Player> getPlayerByNationality(String nationality) {
        String sql = "SELECT * FROM PLAYER WHERE NATIONALITY = ?";

        return jdbcTemplate.query(sql, new PlayerMapper(), new Object[] {nationality});
    }

    logger.info("\nFrench Players: {}", dao.getPlayerByNationality("France"));