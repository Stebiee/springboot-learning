what is springboot?
    spring boot enables robust creation of apps
    it provides features like servers, but by itself not an application or server

    autoconfiguration is a feature of spring boot where it provides all the dependencies to start a project
    for example starter web automatically configures everything needed for a web application

    similarly starter JPA configures basic JPA along with Hibernate
    spring boot makes the creation of a wep app easier
    it takes the responsibility of making frameworks compatible with each other
    you just need to specify the uber dependency like starter web, and spring boot will configure the
    compatible versions of spring-core, dispatcher servlet, view resolver, logging, security, and validation
    frameworks along with exception handling and support for internationalization.
    saving time spent on the initial creation of a project

starter projects
    have a set of pre-configured dependencies to simplify the build configuration

    Start web is the preferred starter for web apps including RESTful applications using spring MVC
        it uses tomcat as the default embedded container.
        the pom.xml file of spring-boot-starter-web shows dependencies like spring-web/webmvc, starter-tomcat/json
        for conversion to JSON when a web service is invoked.

    Starter test is the dependency for testing spring boot apps with libraries like
        JUnit Jupiter, Hamcrest, and Mockito
        spring-boot-starter-test enables the dev to write unit and integration tests.
        the pom.xml shows dependencies on JUnit, AssertJ, and Mockito
        it has Hamcrest that, in combination with AssertJ, is used for writing matchers

    Starter JPA is another starter project
        JPA is the interface for the Hibernate framework
        starter-data-jpa is used for Spring Data JPA with Hibernate
        pom.xml shows dependency on spring-boot-starter-aop, spring-boot-starter-jdbc, hibernate-core, and transaction-api

Spring Web dependency adds jars to maven dependency which are useful when creating REST applications

Spring Boot provides an embedded server, http://localhose:8080
initially there is an error from not having an /error defined

@RestController
    the controller is a Java class that maps a URI to a method
    when the method is executed, it returns a response
    to create a controller we will create a class called RecommendationController with @RestController annotation
    this annotation is a specialized @Controller which handles REST requests and responses, handles conversion to JSON

    for this project Movie class was created with fields for id, name, and rating, along with arg and no arg constructor
    as well as getters and custom toString methods

    then in the controller class RecommendationController a method is created to get a list of movies
    public List<Movie> getAllMovies() {
            return Arrays.asList(new Movie(1, "Ice Age", 7.5),
                    new Movie(2, "Happy Feet", 6.4),
                    new Movie(3, "Shark Tales", 6.0));
    }

Mapping Requests
    so far have created a controller and a method.
    now spring needs to know it should call this method when the HTTP request is received.

    GET, POST, PUT are types of HTTP requests
    @RequestMapping maps the HTTP request and URI to a method in the controller.
    since currently wanting to handle GET request shortcutmapping
    @GetMapping can be used on the method to handle the GET request
    @GetMapping("/movies")
    or
    @RequestMapping(method=requestMethod.GET, value="/movies")
    this will map the /movies URI to the getAllMovies method and convert the list to a JSON response

    the REST controller is now ready.
    now when visiting http://localhost:8080/movies
    there is no error but a JSON response of the list of movies

Recap
    created a controller while everything else was created by springboot
    what happened in the background

    @SpringBootApplication annotation defines a configuration and enables component scan
        the dispatcher servlet gets initialized without configuring it

    during component scan all classes marked with different @Component are registered as beans
        @RestController included amd RecommendationController is listed as a component

    Tomcat server is autoconfigured and started at localhost:8080

    RecommendationsController is a controller where on http request returns an array in JSON
        starter-json dependency causes the JSON binding

    spring-boot-autoconfigure is listed as a dependency in maven dependencies
        turning on debug mode on the application.properties file will show the autoconfiguration report
        logging.level.org.springframework = DEBUG

        positive matches
        this report mentions all the beans that have been configured due to conditional matching

        negative matches
        it also shows all the things that were not autoconfigured

        
        why some beans were not created
